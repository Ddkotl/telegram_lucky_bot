import 'dotenv/config'
import { bot } from './bot.js'
import {
	gameCommand,
	infoCommand,
	notUnderstandCommand,
	refCommand,
	setMyCommands,
	startCommand,
} from './commands/index.js'
import prisma from './db.js'

import { testConnect } from './db_querys/index.js'
import { addSmallBoxByUserId } from './db_querys/reward/update.js'
import { findUserRewardsByChatId } from './db_querys/user/find_one.js'
import { createUser, findUserByChatId } from './db_querys/user/index.js'
import {
	amuletOptions,
	boxOptions,
	connectWalletOptions,
	goToMainMenuOptions,
	saveWalletOptions,
	shopOptions,
	startGameOptions,
} from './options.js'

export const chats = new Object()

const startApp = async () => {
	testConnect()
	setMyCommands()
	bot.on('message', async msg => {
		try {
			const chatId = msg.chat.id
			const username = msg.chat.username
			const firstname = msg.chat.first_name
			const text = msg.text

			const user = await findUserByChatId(chatId)
			if (!user) {
				await createUser(chatId, username, firstname, text)
				return await bot.sendMessage(
					chatId,
					'ü•≥–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å,–Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ ü´°'
				)
			}

			if (text === '/start') {
				if (user) {
					return await startCommand(chatId, user, msg)
				}
			}

			return await notUnderstandCommand(chatId, firstname, username)
		} catch (error) {
			console.log(error)
		}
	})
	bot.on('callback_query', async msg => {
		try {
			const data = msg.data
			const chatId = msg.message.chat.id
			const user = await findUserByChatId(chatId)
			if (data === '/info') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await infoCommand(chatId, user)
			}
			if (data === '/ref') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await refCommand(chatId, user)
			}
			if (data === '/tasks') {
				return await bot.sendMessage(chatId, 'Tasks')
			}
			if (data === '/shop') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await bot.sendMessage(
					chatId,
					`üíé–í –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã,—É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ –ø—Ä–∏—Ä–æ—Å—Ç –≤–∞—à–µ–π —É–¥–∞—á–∏ ${process.env.COIN_NAME}.\n\nüíé–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–≤—É—Ö –≤–∏–¥–æ–≤:\n\nüéÅ–õ–∞—Ä—Ü—ã - –ø—Ä–æ–¥–∞—é—Ç—Å—è –∑–∞ ${process.env.COIN_NAME} –∏ –¥–∞—é—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${process.env.COIN_NAME} —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏. –õ–∞—Ä—Ü–æ–≤ –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n\nü™°–ê–º—É–ª–µ—Ç—ã - –æ–Ω–∏ –¥–∞—é—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${process.env.COIN_NAME} —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏, –∞ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–º–µ—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.`,
					{
						parse_mode: 'HTML',
						...shopOptions,
					}
				)
			}
			if (data === '/box') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await bot.sendMessage(
					chatId,
					`üíé–í –ú–∞–≥–∞–∑–∏–Ω–µ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:\n\n1.C—Ç–∞—Ä—ã–π –ª–∞—Ä–µ—Ü (500 ${process.env.COIN_NAME})\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—Ç 10 –¥–æ 50 ${process.env.COIN_NAME}\n\n2. –†–æ—Å–∫–æ—à–Ω—ã–π –ª–∞—Ä–µ—Ü (2500 ${process.env.COIN_NAME})\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—Ç 60 –¥–æ 250 ${process.env.COIN_NAME}\n\n3. –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω—ã–π –ª–∞—Ä–µ—Ü (5500 ${process.env.COIN_NAME})\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—Ç 140 –¥–æ 550 ${process.env.COIN_NAME}\n\nüíé–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.LUCK} ${process.env.COIN_NAME}`,
					{
						parse_mode: 'HTML',
						...boxOptions,
					}
				)
			}
			if (data === '/smallBox') {
				if (user.LUCK < 500) {
					return await bot.sendMessage(
						chatId,
						`‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${process.env.COIN_NAME} –¥–ª—è –ø–æ–∫—É–ø–∫–∏!`
					)
				} else {
					await bot.deleteMessage(chatId, msg.message.message_id)
					await addSmallBoxByUserId(user)
					return await bot.sendMessage(
						chatId,
						`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 1 C—Ç–∞—Ä—ã–π –ª–∞—Ä–µ—Ü!`,
						{ parse_mode: 'HTML', ...boxOptions }
					)
				}
			}
			if (data === '/amulet') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await bot.sendMessage(chatId, 'amulet', {
					parse_mode: 'HTML',
					...amuletOptions,
				})
			}
			if (data === '/inventory') {
				const revard = await findUserRewardsByChatId(chatId)
				console.log(revard)
				return await bot.sendMessage(chatId, 'inventory')
			}
			if (data === '/connectWallet') {
				await bot.deleteMessage(chatId, msg.message.message_id)

				return await bot.sendMessage(
					chatId,
					`üíé–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ $TON –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:`,
					{ parse_mode: 'HTML', ...saveWalletOptions }
				)
			}
			if (data === '/saveWallet') {
				console.log(msg)
				return await bot.sendMessage(
					chatId,
					`ÔøΩÔøΩ–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å ${process.env.COIN_NAME}!`,
					{ parse_mode: 'HTML', ...goToMainMenuOptions }
				)
			}
			if (data === '/wallet') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await bot.sendMessage(
					chatId,
					`üíé–ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ $TON, –Ω–∞ –Ω–µ–≥–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞–≥—Ä–∞–¥—ã –∏ –±—É–¥—É—â–∏–π –∞–∏—Ä–¥—Ä–æ–ø.\n\n üíé–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω`,
					{ parse_mode: 'HTML', ...connectWalletOptions }
				)
			}
			if (data === '/goToMainMenu') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await startCommand(chatId, user)
			}
			if (data === '/game') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return gameCommand(chatId)
			}
			if (data == chats[chatId]) {
				const winCoin = Number(process.env.WIN_COIN)
				await prisma.user.update({
					where: { chatId: chatId },
					data: {
						right: user.right + 1,
						LUCK: user.LUCK + winCoin,
					},
				})
				await bot.editMessageText(
					`ü•≥–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É–≥–∞–¥–∞–ª–∏!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${
						process.env.WIN_COIN
					} ${process.env.COIN_NAME}, –æ—Å—Ç–∞–ª–æ—Å—å ${user.LUCK + winCoin} ${
						process.env.COIN_NAME
					}
					`,
					{
						chat_id: chatId,
						message_id: msg.message.message_id,
					},
					{ parse_mode: 'HTML' }
				)
				return await bot.sendMessage(
					chatId,
					'X–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?',
					startGameOptions
				)
			} else {
				if (user.LUCK <= 0) {
					await prisma.user.update({
						where: { chatId: chatId },
						data: { wrong: user.wrong + 1 },
					})
					await bot.editMessageText(
						`ü•∫–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ ${chats[chatId]}.\n–û—Å—Ç–∞–ª–æ—Å—å ${user.LUCK} ${process.env.COIN_NAME}
						`,
						{
							chat_id: chatId,
							message_id: msg.message.message_id,
						},
						{ parse_mode: 'HTML' }
					)
				} else {
					await prisma.user.update({
						where: { chatId: chatId },
						data: {
							wrong: user.wrong + 1,
							LUCK: user.LUCK - process.env.LOSE_COIN,
						},
					})
					await bot.editMessageText(
						`ü•∫–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ ${
							chats[chatId]
						}.\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${process.env.LOSE_COIN} ${
							process.env.COIN_NAME
						}, –æ—Å—Ç–∞–ª–æ—Å—å ${user.LUCK - process.env.LOSE_COIN} ${
							process.env.COIN_NAME
						}
						`,
						{
							chat_id: chatId,
							message_id: msg.message.message_id,
						},
						{ parse_mode: 'HTML' }
					)
				}

				return await bot.sendMessage(
					chatId,
					'X–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?',
					startGameOptions
				)
			}
		} catch (error) {
			console.log(error)
		}
	})
}

startApp()
