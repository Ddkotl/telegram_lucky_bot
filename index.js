import 'dotenv/config'
import { bot } from './bot.js'
import {
	infoCommand,
	notUnderstandCommand,
	refCommand,
	setMyCommands,
	startCommand,
} from './commands/index.js'

import { createUserActions } from './actions/user/index.js'
import { game, langQuery, shopQuery } from './callback_queries/index.js'
import { findRewardInfoByUserID } from './db_querys/reward/index.js'
import { completeTask1, findTaskInfoByUserID } from './db_querys/task/index.js'
import { findUserByChatId } from './db_querys/user/index.js'
import { connectWalletOptions } from './options.js'

const startApp = async () => {
	setMyCommands()
	bot.on('message', async msg => {
		try {
			const chatId = msg.chat.id
			const username = msg.chat.username
			const firstname = msg.chat.first_name
			const text = msg.text
			const lang = msg.from.language_code
			const user = await findUserByChatId(chatId)
			if (!user) {
				return await createUserActions(chatId, username, firstname, lang, text)
			}
			if (text === '/start') {
				return await startCommand(chatId, user)
			}
			return await notUnderstandCommand(chatId, user)
		} catch (error) {
			console.log(error)
		}
	})
	bot.on('callback_query', async msg => {
		try {
			const data = msg.data
			const chatId = msg.message.chat.id
			const user = await findUserByChatId(chatId)
			const userReward = await findRewardInfoByUserID(user.id)
			const userTask = await findTaskInfoByUserID(user.id)

			await game(data, msg, chatId, user)
			await shopQuery(data, msg, chatId, user)
			await langQuery(data, chatId, msg, user)

			if (data === '/goToMainMenu') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await startCommand(chatId, user)
			}
			if (data === '/info') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await infoCommand(chatId, user)
			}
			if (data === '/ref') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await refCommand(chatId, user)
			}
			if (data === '/tasks') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await bot.sendMessage(
					chatId,
					`‚ùáÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è—é\n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ ${process.env.COIN_NAME}!\n–í—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ.\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ ${process.env.COIN_FOR_TASK} ${process.env.COIN_NAME} –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è`,
					{
						parse_mode: 'HTML',
						reply_markup: JSON.stringify({
							inline_keyboard: [
								[
									{
										text: `${
											userTask.task1 ? '‚úÖ' : '‚ùáÔ∏è'
										}–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ ${process.env.COIN_NAME}`,
										callback_data: '/task1',
									},
								],
							],
						}),
					}
				)
			}
			if (data === '/task1') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				if (userTask.task1) {
					return await bot.sendMessage(
						chatId,
						`‚úÖ–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É`,
						{
							parse_mode: 'HTML',
							reply_markup: JSON.stringify({
								inline_keyboard: [
									[
										{ text: '–ù–∞–∑–∞–¥', callback_data: '/tasks' },
										{
											text: '‚ôªÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
											callback_data: '/goToMainMenu',
										},
									],
								],
							}),
						}
					)
				} else {
					return await bot.sendMessage(
						chatId,
						`–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ${process.env.TASK1}.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.\n–í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —Ç—ã –ø–æ–ª—É—á–∏—à—å ${process.env.COIN_FOR_TASK} ${process.env.COIN_NAME}`,
						{
							parse_mode: 'HTML',
							reply_markup: JSON.stringify({
								inline_keyboard: [
									[{ text: '–ü–µ—Ä–µ–π—Ç–∏', url: process.env.TASK1 }],
									[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: '/checkTask1' }],
									[
										{ text: '–ù–∞–∑–∞–¥', callback_data: '/tasks' },
										{
											text: '‚ôªÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
											callback_data: '/goToMainMenu',
										},
									],
								],
							}),
						}
					)
				}
			}
			if (data === '/checkTask1') {
				const pass = await bot.getChatMember('@luck_drop', chatId)
				if (pass.status === 'left') {
					return await bot.sendMessage(
						chatId,
						'‚ùå–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞'
					)
				} else {
					await completeTask1(user)
					return await bot.sendMessage(
						chatId,
						`‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ ${process.env.COIN_FOR_TASK} ${process.env.COIN_NAME}`
					)
				}
			}

			if (data === '/inventory') {
				return await bot.sendMessage(chatId, 'inventory')
			}
			if (data === '/connectWallet') {
				await bot.deleteMessage(chatId, msg.message.message_id)

				return await bot.sendMessage(
					chatId,
					`üíé–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ $TON –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:`,
					{ parse_mode: 'HTML', ...saveWalletOptions }
				)
			}
			if (data === '/saveWallet') {
				console.log(msg)
				return await bot.sendMessage(
					chatId,
					`ÔøΩÔøΩ–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å ${process.env.COIN_NAME}!`,
					{ parse_mode: 'HTML', ...goToMainMenuOptions }
				)
			}
			if (data === '/wallet') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return await bot.sendMessage(
					chatId,
					`üíé–ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ $TON, –Ω–∞ –Ω–µ–≥–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞–≥—Ä–∞–¥—ã –∏ –±—É–¥—É—â–∏–π –∞–∏—Ä–¥—Ä–æ–ø.\n\n üíé–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω`,
					{ parse_mode: 'HTML', ...connectWalletOptions }
				)
			}
		} catch (error) {
			console.log(error)
		}
	})
}

startApp()
