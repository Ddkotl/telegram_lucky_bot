import 'dotenv/config'
import TelegramBot from 'node-telegram-bot-api'
import prisma from './db.js'
import { getRamdomNumber } from './functions.js'
import { againOptions, gameOptions } from './options.js'

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true })
bot.on('polling_error', err => {
	console.log(err.data.message)
})

const chats = new Object()

const createGame = async chatId => {
	try {
		await bot.sendMessage(
			chatId,
			'–Ø –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å.',
			gameOptions
		)
		chats[chatId] = getRamdomNumber()
	} catch (error) {
		console.log(error)
	}
}

const start = async () => {
	try {
		await prisma.$connect().then(() => {
			return console.log('Database connected')
		})
	} catch (error) {
		console.log('Error connecting to database', error)
	}

	try {
		bot.setMyCommands([
			{ command: '/start', description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
			{ command: '/info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
			{ command: '/game', description: '–ò–≥—Ä–∞' },
		])
	} catch (error) {
		console.log(error)
	}

	bot.on('message', async msg => {
		try {
			const chatId = msg.chat.id
			const username = msg.chat.username
			const firstname = msg.chat.first_name
			const text = msg.text
			const user = await prisma.user.findUnique({
				where: { chatId: chatId },
			})
			console.log(msg)
			if (!user) {
				await prisma.user.create({
					data: { chatId: chatId, username: username, first_name: firstname },
				})
			}

			if (text === '/start') {
				await bot.sendSticker(
					chatId,
					'https://tlgrm.ru/_/stickers/c70/8c4/c708c4e4-425e-43c1-893f-6478eae07d62/2.webp'
				)
				return await bot.sendMessage(
					chatId,
					`
					  –ü—Ä–∏–≤–µ—Ç ${user.first_name} ${user.username}, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é —É–¥–∞—á—É!

					${process.env.COIN_NAME} –û–∂–∏–¥–∞–µ—Ç—Å—è –±–æ–ª—å—à–æ–π –∞–∏—Ä–¥—Ä–æ–ø üöÄ 

					${process.env.COIN_NAME} ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ TON —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º. –ú–æ–Ω–µ—Ç–∞ —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –∏–≥—Ä–æ–≤—ã–º —Ä–µ—Å—É—Ä—Å–æ–º –≤ –±—É–¥—É—â–µ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ LUCK, –∞ –¥–æ–±—ã–≤–∞—Ç—å –µ–µ –º–æ–∂–Ω–æ —É–∂–µ —Å–µ–π—á–∞—Å.

					–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ ${process.env.COIN_NAME}? –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –±–æ—Ç–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è,–≤—ã –∏ –æ–Ω –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å - 500 –º–æ–Ω–µ—Ç ${process.env.COIN_NAME}!

					–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.LUCK} ${process.env.COIN_NAME}üí∞

					üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referals} 
					`,
					againOptions
				)
			}
			if (text === '/info') {
				const user = await prisma.user.findUnique({
					where: { chatId: chatId },
				})
				return await bot.sendMessage(
					chatId,
					`${user.first_name} ${user.username},–≤–æ—Ç –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!
					 –í—Å–µ–≥–æ –∏–≥—Ä ${user.wrong + user.right}.
					 –ü–æ–±–µ–¥ ${user.right}.
					 –ù–µ—É–¥–∞—á ${user.wrong}.`
				)
			}
			if (text === '/game') {
				return createGame(chatId)
			}
			return await bot.sendMessage(
				chatId,
				'–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, ' +
					firstname +
					' ' +
					username +
					', –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!'
			)
		} catch (error) {
			console.log(error)
		}
	})
	bot.on('callback_query', async msg => {
		try {
			const data = msg.data
			const chatId = msg.message.chat.id
			const user = await prisma.user.findUnique({
				where: { chatId: chatId },
			})
			if (data === '/again') {
				await bot.deleteMessage(chatId, msg.message.message_id)
				return createGame(chatId)
			}
			if (data == chats[chatId]) {
				const winCoin = Number(process.env.WIN_COIN)
				await prisma.user.update({
					where: { chatId: chatId },
					data: {
						right: user.right + 1,
						LUCK: user.LUCK + winCoin,
					},
				})
				await bot.editMessageText(
					`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É–≥–∞–¥–∞–ª–∏!
					–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${process.env.WIN_COIN} ${process.env.COIN_NAME}, –æ—Å—Ç–∞–ª–æ—Å—å ${
						user.LUCK + winCoin
					} ${process.env.COIN_NAME}
					`,
					{
						chat_id: chatId,
						message_id: msg.message.message_id,
					}
				)
				return await bot.sendMessage(
					chatId,
					'X–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?',
					againOptions
				)
			} else {
				if (user.LUCK <= 0) {
					await prisma.user.update({
						where: { chatId: chatId },
						data: { wrong: user.wrong + 1 },
					})
					await bot.editMessageText(
						`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ ${chats[chatId]}
						–û—Å—Ç–∞–ª–æ—Å—å ${user.LUCK} ${process.env.COIN_NAME}
						`,
						{
							chat_id: chatId,
							message_id: msg.message.message_id,
						}
					)
				} else {
					await prisma.user.update({
						where: { chatId: chatId },
						data: {
							wrong: user.wrong + 1,
							LUCK: user.LUCK - process.env.LOSE_COIN,
						},
					})
					await bot.editMessageText(
						`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${data}, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ ${
							chats[chatId]
						}
						–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${process.env.LOSE_COIN} ${
							process.env.COIN_NAME
						}, –æ—Å—Ç–∞–ª–æ—Å—å ${user.LUCK - process.env.LOSE_COIN} ${
							process.env.COIN_NAME
						}
						`,
						{
							chat_id: chatId,
							message_id: msg.message.message_id,
						}
					)
				}

				return await bot.sendMessage(
					chatId,
					'X–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?',
					againOptions
				)
			}
		} catch (error) {
			console.log(error)
		}
	})
}

start()
